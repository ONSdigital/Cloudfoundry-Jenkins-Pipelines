script {
	// Array to hold environmental variables
	// This is to avoid trigger a Jenkins sandbox violation
	custom_env = []

	// Jenkins pipelines don't completely work until they are checked out, they have configured the job and then ran again
	// This means that when a repository first gets checked out, the Git SCM parameter plugin can't display the list of branches
	branches = [:]

	missing_branch = 0

	// Default terminal type
	terminal_type = 'xterm'

	// Loading in the order they appear
	// .properties is appended
	property_files = [ 'common', 'buildpack' ]

	repos = [
		buildpack: [
			dir: 'Buildpack',
			url: 'https://github.com/cloudfoundry/staticfile-buildpack'
		],
		deployment: [
			dir: 'Cloudfoundry-Deployment',
			url: env.CLOUDFOUNDRY_DEPLOYMENT_REPO
		],
		orchestration: [
			dir: 'Orchestration',
			url: env.CLOUDFOUNDRY_ORCHESTRATION_REPO
		],
		config: [
			dir: 'Config',
			url: env.CLOUDFOUNDRY_ORCHESTRATION_CONFIGURATION_REPO
		]
	]
}

properties([
	disableResume(),
	buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '10', numToKeepStr: '10')),
	parameters([
		[
			$class: 'GitParameterDefinition',
			name: 'GIT_BUILDPACK_TAG',
			description: 'Buildpack Tag',
			defaultValue: 'origin/master',
			tagFilter: 'v*.*',
			selectedValue: 'TOP',
			sortMode: 'DESCENDING_SMART',
			type: 'PT_TAG',
			useRepository: repos.buildpack.url
		],
		[
			$class: 'GitParameterDefinition',
			name: 'CLOUDFOUNDRY_DEPLOYMENT_BRANCH',
			description: 'Deployment Branch',
			branch: '',
			branchFilter: '.*',
			defaultValue: 'origin/master',
			quickFilterEnabled: false,
			selectedValue: 'DEFAULT',
			sortMode: 'ASCENDING_SMART',
			type: 'PT_BRANCH',
			useRepository: repos.deployment.url
		],
		[
			$class: 'GitParameterDefinition',
			name: 'CLOUDFOUNDRY_ORCHESTRATION_BRANCH',
			description: 'Orchestration Branch',
			branch: '',
			branchFilter: '.*',
			defaultValue: 'origin/master',
			quickFilterEnabled: false,
			selectedValue: 'DEFAULT',
			sortMode: 'ASCENDING_SMART',
			type: 'PT_BRANCH',
			useRepository: repos.orchestration.url
		],
		[
			$class: 'GitParameterDefinition',
			name: 'CLOUDFOUNDRY_ORCHESTRATION_CONFIGURATION_BRANCH',
			description: 'Configuration Branch',
			branch: '',
			branchFilter: '.*',
			defaultValue: 'origin/master',
			quickFilterEnabled: false,
			selectedValue: 'DEFAULT',
			sortMode: 'ASCENDING_SMART',
			type: 'PT_BRANCH',
			useRepository: repos.config.url
		],
		booleanParam(
			name: 'DEBUG',
			description: 'Run in debug mode',
			defaultValue: false
		)
	])
])

node('master'){
	stage('Ensure clean workspace'){
		// We clean the entire workspace, otherwise we end up with a dirty workspace, even if the checkout dirs under that workspace are clean
		// We clean before we start in case there are left overs from the previous build, if we clean after a build completes, we may not always
		// clean if the build fails
		deleteDir()
	}

	stage('Checking branches'){
		for(String branch : [ 'CLOUDFOUNDRY_DEPLOYMENT_BRANCH','CLOUDFOUNDRY_ORCHESTRATION_BRANCH','CLOUDFOUNDRY_ORCHESTRATION_CONFIGURATION_BRANCH','GIT_BUILDPACK_TAG' ]){
			if(params[branch] == '!No Git repository configured in SCM configuration'){
				branches[branch] = 'origin/master'

				missing_branch = 1
			}else{
				branches[branch] = params[branch]
			}
		}
	}

	stage("Checking out $repos.deployment.dir"){
		checkout(
			$class: 'GitSCM',
			branches: [[ name: branches['CLOUDFOUNDRY_DEPLOYMENT_BRANCH'] ]],
			extensions: [
				[
					$class: 'RelativeTargetDirectory',
					relativeTargetDir: repos.deployment.dir
				],
				[
					$class: 'SubmoduleOption',
					recursiveSubmodules: true,
					disableSubmodules: false,
					parentCredentials: false
				]
			],
			userRemoteConfigs: [[
				url: repos.deployment.url
			]]
		)
	}
	stage("Checking out $repos.orchestration.dir"){
		checkout(
			$class: 'GitSCM',
			branches: [[ name: branches['CLOUDFOUNDRY_ORCHESTRATION_BRANCH'] ]],
			extensions: [
				[
					$class: 'RelativeTargetDirectory',
					relativeTargetDir: repos.orchestration.dir
				]
			],
			userRemoteConfigs: [[
				url: repos.orchestration.url
			]]
		)
	}
	stage("Checking out $repos.config.dir"){
		checkout(
			$class: 'GitSCM',
			branches: [[ name: branches['CLOUDFOUNDRY_ORCHESTRATION_CONFIGURATION_BRANCH'] ]],
			extensions: [
				[
					$class: 'RelativeTargetDirectory',
					relativeTargetDir: repos.config.dir
				]
			],
			userRemoteConfigs: [[
				url: repos.config.url
			]]
		)
	}
	stage("Checking out $repos.buildpack.dir"){
		checkout(
			$class: 'GitSCM',
			branches: [[ name: branches['GIT_BUILDPACK_TAG'] ]],
			extensions: [
				// We want to be able to check things back in
				[ $class: 'LocalBranch' ],
				[
					$class: 'RelativeTargetDirectory',
					relativeTargetDir: repos.buildpack.dir
				]
			],
			userRemoteConfigs: [[
				url: repos.buildpack.url
			]]
		)
	}

	if(missing_branch){
		error('Repository checkout asked for incorrect branch/tag')
	}

	for(String property_file : property_files){
		if(fileExists("$repos.config.dir/${property_file}.properties")){
			stage("Load ${property_file}.properties file"){
				// Load properties and turn them into environmental variables
				// Requires approval from Jenkins > Manage jenkins > In-process Script Approval
				readProperties(file: "$repos.config.dir/${property_file}.properties").each{
					k, v -> custom_env.add("$k=$v")
				}
			}
		}
	}

	stage('Build Staticfile Offline Buildpack'){
		withEnv(["TERM=$terminal_type"] + custom_env){
			ansiColor(terminal_type){
				dir(repos.deployment.dir){
					sh "../$repos.orchestration.dir/cf/build_buildpack.sh staticfile ../$repos.buildpack.dir"
				}
			}
		}
	}

	stage('Archive the Artifacts'){
		// It would have been nice if archiveArtifacts() respected the dir() enclosure, but it doesn't
		archiveArtifacts(
			artifacts: "$repos.buildpack.dir/staticfile_buildpack-cached-v*.zip",
			fingerprint: true
		)
	}
}

